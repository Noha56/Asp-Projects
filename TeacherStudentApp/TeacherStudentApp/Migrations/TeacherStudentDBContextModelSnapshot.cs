// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeacherStudentApp.Data;

#nullable disable

namespace TeacherStudentApp.Migrations
{
    [DbContext(typeof(TeacherStudentDBContext))]
    partial class TeacherStudentDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TeacherStudentApp.Models.Student", b =>
                {
                    b.Property<int>("SId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SId"), 1L, 1);

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("TeacherStudentApp.Models.Teacher", b =>
                {
                    b.Property<int>("TId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("TeacherStudentApp.Models.TeacherStudent", b =>
                {
                    b.Property<int>("StudentrId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("StudentSId")
                        .HasColumnType("int");

                    b.HasKey("StudentrId", "TeacherId");

                    b.HasIndex("StudentSId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherStudents");
                });

            modelBuilder.Entity("TeacherStudentApp.Models.TeacherStudent", b =>
                {
                    b.HasOne("TeacherStudentApp.Models.Student", "Student")
                        .WithMany("TeacherStudent")
                        .HasForeignKey("StudentSId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeacherStudentApp.Models.Teacher", "Teacher")
                        .WithMany("TeacherStudent")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("TeacherStudentApp.Models.Student", b =>
                {
                    b.Navigation("TeacherStudent");
                });

            modelBuilder.Entity("TeacherStudentApp.Models.Teacher", b =>
                {
                    b.Navigation("TeacherStudent");
                });
#pragma warning restore 612, 618
        }
    }
}
